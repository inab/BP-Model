<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bp="http://www.blueprint-epigenome.eu/dcc/schema" elementFormDefault="qualified" targetNamespace="http://www.blueprint-epigenome.eu/dcc/schema" version="2.0">
    <xs:annotation>
        <xs:documentation>BLUEPRINT DCC Schema 2.0, which integrates the description of the tabular submission files, their filenames and their relationships</xs:documentation>
    </xs:annotation>
    
    <xs:simpleType name="nonEmptyStringType">
        <xs:restriction base="xs:string">
            <xs:minLength value="1" />
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="columnNameType">
        <xs:annotation>
            <xs:documentation>column names can have only alphanumeric (and underscore) characters</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z_][a-zA-Z0-9_]*" />
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="conceptTypeNameType">
        <xs:annotation>
            <xs:documentation>column names can have only alphanumeric (and underscore) characters</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z_][a-zA-Z0-9_-]*" />
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="symbolType">
        <xs:annotation>
            <xs:documentation>symbols can have only alphanumeric characters</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z][a-zA-Z0-9]*" />
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="aliasType">
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z][a-zA-Z0-9]*:[a-zA-Z][a-zA-Z0-9]*" />
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="fileNameType">
        <xs:annotation>
            <xs:documentation>The filename pattern, which validates the right patterns</xs:documentation>
            <xs:documentation>The format of the filenames for files containing knwoledge from a concept domain.
                Inside these patterns, when something starts with $ (dollar), it is the name of an
                annotation or a context-dependent value (like $$domain or $$concept). $$domain is the concept domain name,
                and $$concept is the concept name.
                When something starts with @ (at), it is the name of a previously declared controlled vocabulary.
                When something starts with \ (backslash), it is the name of a previously declared pattern to validate against.
                When something starts with % (percentage), it is the name of a type, used for item-type attribute in column type definition.
                For instance: $$domain-$$concept--@B1-\ISODATE--%string.txt
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:minLength value="1" />
            <xs:pattern value="[^\\$%@]*(([\\%@]|${1,2})([a-zA-Z][a-zA-Z0-9]*)[^\\$%@]*)*" />
        </xs:restriction>
    </xs:simpleType>
    
    <!--
    <xs:simpleType name="compoundTypePatternType">
        <xs:annotation>
            <xs:documentation>The compound type pattern pattern, which validates the right patterns</xs:documentation>
            <xs:documentation>The format of the compound type patterns is a generalization of filename patterns.
                The compound types can be understood as structures or hashes of facets,
                with references to restrictions attached to those facets. Facets are described as
                [decorator][facetName]:[restrictionId]
                Inside these patterns, when a decorator is $ (dollar), restrictionId is the name of an
                annotation or a context-dependent value (like $$bla:domain or $$bla:concept). $$domain is the concept domain name,
                and $$concept is the concept name.
                If decorator is @ (at), restrictionId is the name of a previously declared controlled vocabulary.
                If decorator is \ (backslash), restrictionId is the name of a previously declared pattern to validate against.
                If decorator is % (percentage), restrictionId is the name of a type, used for item-type attribute in column type definition.
                For instance: @id:EGA;%url:string
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:minLength value="1" />
            <xs:pattern value="[^\\$%@]*(([\\%@]|${1,2})([a-zA-Z][a-zA-Z0-9]*:[a-zA-Z][a-zA-Z0-9]*)[^\\$%@]*)*" />
        </xs:restriction>
    </xs:simpleType>
    -->
    
    <xs:simpleType name="colorType">
        <xs:annotation>
            <xs:documentation>This simple type is a resemblance of SVG data type color (see http://www.w3.org/TR/SVG/types.html#DataTypeColor)</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="#[0-9a-fA-F]{3}">
                <xs:annotation>
                    <xs:documentation>#rgb format</xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="#[0-9a-fA-F]{6}">
                <xs:annotation>
                    <xs:documentation>#rrggbb format</xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="rgb\(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]),([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]),([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\)">
                <xs:annotation>
                    <xs:documentation>rbg(0..255,0..255,0..255) format</xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="rgb\(([0-9]|[1-9][0-9]|100)%,([0-9]|[1-9][0-9]|100)%,([0-9]|[1-9][0-9]|100)%\)">
                <xs:annotation>
                    <xs:documentation>rgb(0%..100%,0%..100%,0%..100%) format</xs:documentation>
                </xs:annotation>
            </xs:pattern>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="conceptRefType">
        <xs:attribute name="domain" type="bp:symbolType" use="optional">
            <xs:annotation>
                <xs:documentation>The domain where the concept is defined. By default, it is the same domain
                    as the one where the concept containing this related-to or inherits-from element is defined.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="concept" type="bp:symbolType" use="required">
            <xs:annotation>
                <xs:documentation>The concept this one is related to or inherits from</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    
    
    <xs:element name="color" type="bp:colorType">
        <xs:annotation>
            <xs:documentation>This color element was created to define colors in annotations</xs:documentation>
        </xs:annotation>
    </xs:element>
    
    
    <xs:element name="ordering-hints">
        <xs:complexType>
            <xs:choice>
                <xs:element name="block">
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="top"/>
                            <xs:enumeration value="medium"/>
                            <xs:enumeration value="bottom"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:element>
                <xs:element name="explicit-order" minOccurs="1" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>Hints of an explicit order of the columns, used by code and documentation generators</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="column" type="bp:columnNameType" minOccurs="1" maxOccurs="unbounded"/>
                        </xs:sequence>
                        <xs:attribute name="category">
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="idref"/>
                                    <xs:enumeration value="other"/>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="description">
        <xs:annotation>
            <xs:documentation>The detailed description of this item. It can have xhtml code embedded</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence>
                <xs:any processContents="lax" namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="annotation">
        <xs:annotation>
            <xs:documentation>Additional annotations, either supplementary documentation or other future kinds</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice>
                <xs:any processContents="lax" namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
                <xs:choice minOccurs="1" maxOccurs="1">
                    <xs:element ref="bp:color" />
                    <xs:element ref="bp:ordering-hints" />
                </xs:choice>
            </xs:choice>
        	<xs:attribute name="key" type="bp:conceptTypeNameType" use="required">
                <xs:annotation>
                    <xs:documentation>The key used to tell the kind of annotation</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    
    <xs:attributeGroup name="vGroup">
        <xs:attribute name="v" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The enumerated value which is used</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    
    <xs:attributeGroup name="nameGroup">
        <xs:attribute name="name" use="required" type="bp:symbolType">
            <xs:annotation>
                <xs:documentation>The symbolic name of the CV, used inside this schema</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    
    <xs:element name="e">
        <xs:annotation>
            <xs:documentation>An enumerated value, containing its description inside the tag</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:simpleContent>
                <xs:extension base="xs:string">
                    <xs:attributeGroup ref="bp:vGroup" />
                </xs:extension>
            </xs:simpleContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="cv-file">
        <xs:annotation>
            <xs:documentation>A local tabular file with the vocabulary, following the enumerated value/description format</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:simpleContent>
                <xs:extension base="bp:nonEmptyStringType">
                    <xs:attribute name="format">
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="cvformat">
                                    <xs:annotation>
                                        <xs:documentation>The ancient, original, custom controlled vocabulary format (tab separated)</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="obo">
                                    <xs:annotation>
                                        <xs:documentation>The OBO flat file format (see http://www.geneontology.org/GO.format.obo-1_2.shtml)</xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:extension>
            </xs:simpleContent>
        </xs:complexType>
    </xs:element>
    
    <!-- First, the reusable complex types -->
    <xs:complexType name="cvType">
        <xs:annotation>
            <xs:documentation>A controlled vocabulary either inline or stored</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element ref="bp:description" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="bp:annotation" minOccurs="0" maxOccurs="unbounded" />
            <xs:choice>
                <xs:element ref="bp:cv-file"/>
                <xs:sequence>
                    <xs:element name="cv-uri" minOccurs="1" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:documentation>A external controlled vocabulary</xs:documentation>
                        </xs:annotation>
                        <xs:complexType>
                            <xs:simpleContent>
                                <xs:extension base="xs:anyURI">
                                    <xs:attribute name="doc" use="optional" type="xs:anyURI">
                                        <xs:annotation>
                                            <xs:documentation>Optional online documentation about the controlled vocabulary</xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="format" use="optional">
                                        <xs:annotation>
                                            <xs:documentation>The format followed by this controlled vocabulary/ontology</xs:documentation>
                                        </xs:annotation>
                                        <xs:simpleType>
                                            <xs:restriction base="xs:string">
                                                <xs:enumeration value="obo">
                                                    <xs:annotation>
                                                        <xs:documentation>Open Bioinformatics and Biomedical Ontologies format</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="RDF">
                                                    <xs:annotation>
                                                        <xs:documentation>Resource Description Framework format (used for instance for GO)</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="OWL">
                                                    <xs:annotation>
                                                        <xs:documentation>Web Ontology Language format</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="EnsemblMySQLDump">
                                                    <xs:annotation>
                                                        <xs:documentation>Ensembl MySQL dump with Ensembl Genes or Transcripts identifiers</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="ISO_3166-1">
                                                    <xs:annotation>
                                                        <xs:documentation>ISO-3166-1 XML format for country codes</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                            </xs:restriction>
                                        </xs:simpleType>
                                    </xs:attribute>
                                </xs:extension>
                            </xs:simpleContent>
                        </xs:complexType>
                    </xs:element>
                    <xs:element ref="bp:cv-file" minOccurs="0" maxOccurs="1"/>
                </xs:sequence>
                <xs:element ref="bp:e" minOccurs="1" maxOccurs="unbounded" />
            </xs:choice>
            <xs:element name="term-alias" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>An alias for a set of terms of this controlled vocabulary</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:sequence>
                        <xs:element ref="bp:description" minOccurs="0" maxOccurs="1" />
                        <xs:element ref="bp:e" minOccurs="1" maxOccurs="unbounded" />
                    </xs:sequence>
                    <xs:attribute name="name" use="required" type="bp:aliasType">
                        <xs:annotation>
                            <xs:documentation>The symbolic name of this alias inside this CV, used inside this schema, which must not appear in the controlled vocabulary.
Any alias must have one and only one colon, which separates a "namespace" from the key</xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="patternType">
        <xs:annotation>
            <xs:documentation>A regular expression used to validate tokens of data</xs:documentation>
        </xs:annotation>
        <xs:attribute name="match" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>A Perl5-like regular expression which matches the content</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    
    <!-- Second, the reusable elements -->
    <xs:element name="column">
        <xs:annotation>
            <xs:documentation>A column of data. It contains the data type, pattern and enumeration restrictions</xs:documentation>
        </xs:annotation>
        
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bp:description" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The detailed description of this column</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element ref="bp:annotation" minOccurs="0" maxOccurs="unbounded" />
                <xs:element name="column-type">
                    <xs:annotation>
                        <xs:documentation>The type and restrictions of the column</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="null" minOccurs="0" maxOccurs="unbounded" type="bp:nonEmptyStringType">
                                <xs:annotation>
                                    <xs:documentation>These elements contain the allowed null values for this column</xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:choice minOccurs="0" maxOccurs="1">
								<xs:choice minOccurs="1" maxOccurs="unbounded">
                            		<xs:element name="cv" type="bp:cvType">
                            			<xs:annotation>
                            				<xs:documentation>An anonymous, inline controlled vocabulary</xs:documentation>
                            			</xs:annotation>
                            		</xs:element>
                            		<xs:element name="cv-ref">
                            			<xs:annotation>
                            				<xs:documentation>One or more references to named, controlled vocabularies</xs:documentation>
                            			</xs:annotation>
                            			<xs:complexType>
                            				<xs:attributeGroup ref="bp:nameGroup" />
                            			</xs:complexType>
                            		</xs:element>
								</xs:choice>
                                <xs:element name="pattern" type="bp:patternType">
                                    <xs:annotation>
                                        <xs:documentation>An anonymous regular expression used to validate tokens of data</xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                                <xs:element name="compound-type" type="bp:anonymousCompoundType">
                                    <xs:annotation>
                                        <xs:documentation>An anonymous compound type</xs:documentation>
                                    </xs:annotation>
                                </xs:element>
                            </xs:choice>
                        </xs:sequence>
                        <xs:attribute name="item-type" use="required">
                            <xs:annotation>
                                <xs:documentation>The basic type of the values for this column, either in single or in multi-dimensional array mode</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="string">
                                        <xs:annotation>
                                            <xs:documentation>String data</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="text">
                                        <xs:annotation>
                                            <xs:documentation>Long string data</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="integer">
                                        <xs:annotation>
                                            <xs:documentation>Integer numbers</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="decimal">
                                        <xs:annotation>
                                            <xs:documentation>Floating point (pseudo-real) numbers</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="boolean">
                                        <xs:annotation>
                                            <xs:documentation>A boolean value (either true or false)</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="timestamp">
                                        <xs:annotation>
                                            <xs:documentation>ISO 8601 Timestamp</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="duration">
                                        <xs:annotation>
                                            <xs:documentation>ISO 8601 Duration (in basic format)</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="compound">
                                        <xs:annotation>
                                            <xs:documentation>A compound type, like a hash or a structure</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="pattern" type="bp:symbolType" use="optional">
                            <xs:annotation>
                                <xs:documentation>The symbolic name of the pattern used to validate values for this column</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="compound-type" type="bp:conceptTypeNameType" use="optional">
                            <xs:annotation>
                                <xs:documentation>When this column holds a compound type, the template of the pieces, separated by the separators.
                                    For instance, if the compound separator is ';', then 'GENE;URL' is telling that the first piece is GENE, and the second is URL</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="cv" type="bp:symbolType" use="optional">
                            <xs:annotation>
                                <xs:documentation>The symbolic name of the controlled vocabulary used to validate the values for this column</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="column-kind" use="required">
                            <xs:annotation>
                                <xs:documentation>The kind of column: idref, required, desirable or optional</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="idref">
                                        <xs:annotation>
                                            <xs:documentation>An identifier or a reference to an identifier</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="required">
                                        <xs:annotation>
                                            <xs:documentation>A required column</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="desirable">
                                        <xs:annotation>
                                            <xs:documentation>A column which is desirable to have values</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="optional">
                                        <xs:annotation>
                                            <xs:documentation>A column with optional values</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="array-seps" type="bp:nonEmptyStringType" use="optional">
                            <xs:annotation>
                                <xs:documentation>If this attribute is set, it is a string whose characters are separators for the input values.
                                    So, values for this column are treated as a multidimensional array, with the same number of dimensions as
                                    the number of separators (i.e. the length of this attribute)</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="default" use="optional">
                            <xs:annotation>
                                <xs:documentation>If this attribute is set, it is a value recognized as "default" for this column. It must fullfil all the checks.
If if starts as $$, it tells the required or idref column with the value for this when a '#DE#' default value is set</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:pattern value="$$[a-zA-Z_][a-zA-Z0-9_]*|[^$].*"></xs:pattern>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="name" use="required" type="bp:columnNameType">
                <xs:annotation>
                    <xs:documentation>The name of this column data</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            
        </xs:complexType>
    </xs:element>
    
    <xs:element name="index">
        <xs:annotation>
            <xs:documentation>An index defined on the collection or the concept type</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="attr" minOccurs="1" maxOccurs="unbounded">
                    <xs:complexType>
                        <xs:attribute name="name" type="bp:columnNameType" use="required">
                            <xs:annotation>
                                <xs:documentation>An attribute whose values are used to build the key</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="ord" use="optional" default="1">
                            <xs:annotation>
                                <xs:documentation>The ordering, either ascending or descending</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:integer">
                                    <xs:enumeration value="-1">
                                        <xs:annotation>
                                            <xs:documentation>Descending ordering</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="1">
                                        <xs:annotation>
                                            <xs:documentation>Ascending ordering</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="unique" use="required" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Should this index ensure the uniqueness property among its keys?</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
        <xs:unique name="indexKey">
            <xs:annotation>
                <xs:documentation>A key cannot have the same attribute twice</xs:documentation>
            </xs:annotation>
            <xs:selector xpath="bp:attr"/>
            <xs:field xpath="@name"/>
        </xs:unique>
        
    </xs:element>
    
    <xs:complexType name="anonymousCompoundType">
        <xs:sequence>
            <xs:element ref="bp:column" />
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element name="sep" type="bp:nonEmptyStringType" />
                <xs:element ref="bp:column" />
            </xs:sequence>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="namedCompoundType">
        <xs:complexContent>
            <xs:extension base="bp:anonymousCompoundType">
                <xs:attribute name="name" use="optional" type="bp:conceptTypeNameType">
                    <xs:annotation>
                        <xs:documentation>The short name for this compound type.
                            If it doesn't appear, then it is an anonymous compound type</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:element name="concept-type">
        <xs:annotation>
            <xs:documentation>Each concept type is associated to a collection, and as such, the concepts could have common attributes</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bp:column" minOccurs="0" maxOccurs="unbounded" />
                <xs:element ref="bp:index" minOccurs="0" maxOccurs="unbounded" />
                <xs:element name="subtypes" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>This element contains the declarations of concept type subtypes</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element ref="bp:concept-type" minOccurs="1" maxOccurs="unbounded"></xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="name" use="optional" type="bp:conceptTypeNameType">
                <xs:annotation>
                    <xs:documentation>The short name for this concept type.
                        If it doesn't appear, then it is an abstract concept type</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="collection" type="bp:symbolType" use="optional">
                <xs:annotation>
                    <xs:documentation>The collection which is going to hold the documents corresponding to concepts whose concept-type is this.
                        A main concept from a concept domain must have this attribute.
                        The concept-types using this attribute cannot use the "key" attribute.
                        If neither "collection" nor "key" attributes appear, the concepts using this concept type must be weak concepts.
                        Those weak concepts inherit the "collection" or "key" attribute from the identifying concept</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="key" type="bp:columnNameType" use="optional">
                <xs:annotation>
                    <xs:documentation>The attribute/column name/hash key which is going to hold the values following this concept set schema.
                        The concepts using a concept-type with a "key" attribute must be a subconcept, because they are stored with this key on documents following the parent concept, and so cannot be a main concept from a concept domain.
                        If neither "collection" nor "key" attributes appear, the concepts using this concept type must be weak concepts.
                        Those weak concepts inherit the "collection" or "key" attribute from the identifying concept.
                        So, the concept-types using this attribute cannot use the "collection" attribute</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="is-virtual" type="xs:boolean" use="prohibited">
                <xs:annotation>
                    <xs:documentation>If this is false, the destination is a real collection.
                        If this is true, the destination is a key inside a parent "document"</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="extends" type="bp:conceptRefType">
        <xs:annotation>
            <xs:documentation>This concept inherits all the definitions from the concept told here, which must be previously declared</xs:documentation>
        </xs:annotation>
    </xs:element>
    
    <xs:element name="base-concept-type">
        <xs:annotation>
            <xs:documentation></xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="name" type="bp:conceptTypeNameType" use="required">
                <xs:annotation>
                    <xs:documentation>The base type(s) this concept is based on. All the declared columns on the type(s) are for this concept, plus the additional ones declared here</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="concept">
        <xs:annotation>
            <xs:documentation>A concept is the equivalent of a class in a programming language, a table in relational model or an entity in the EER.
                As a concept can be an extension of an existing one, but at the same time, it can take one or more concept types as templates,
                there are some rules which must be kept.
                Columns from several concept types can overlap, but idref declarations take precedence from first to last.
                Columns from an extended concept can overlap, meanwhile there is no overlap at idref declarations level.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:choice>
                    <xs:sequence>
                        <xs:element ref="bp:extends" />
                        <xs:element ref="bp:base-concept-type" minOccurs="0" maxOccurs="unbounded" />
                    </xs:sequence>
                    <xs:sequence>
                        <xs:element ref="bp:base-concept-type" minOccurs="1" maxOccurs="unbounded" />
                    </xs:sequence>
                </xs:choice>
                <xs:element ref="bp:description" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>The detailed description of this concept</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element ref="bp:annotation" minOccurs="0" maxOccurs="unbounded" />
                <xs:element ref="bp:column" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="weak-concepts" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>A primary concept can have secondary concepts related.
                            The secondary concepts inherit the idref columns from the primary concepts, so the concept type for these secondary concepts should not overlap columns or types with the primary one</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element ref="bp:annotation" minOccurs="0" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>These annotations are inherited by the keys from the identifying concept</xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element ref="bp:concept" minOccurs="1" maxOccurs="unbounded"/>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="related-to" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>When we need to indicate directional relations 1:N or M:N to other concepts (being this concept the one in the N part), we use this element</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:complexContent>
                            <xs:extension base="bp:conceptRefType">
                                <xs:sequence>
                                    <xs:element ref="bp:annotation" minOccurs="0" maxOccurs="unbounded">
                                        <xs:annotation>
                                            <xs:documentation>These annotations are attached to the foreign columns</xs:documentation>
                                        </xs:annotation>
                                    </xs:element>
                                </xs:sequence>
                                <xs:attribute name="id" use="optional" type="bp:conceptTypeNameType">
                                    <xs:annotation>
                                        <xs:documentation>The unique name of this relation. If it is repeated, it can be replaced</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="arity" use="optional" default="1">
                                    <xs:annotation>
                                        <xs:documentation>The arity of this directional relation</xs:documentation>
                                    </xs:annotation>
                                    <xs:simpleType>
                                        <xs:restriction base="xs:string">
                                            <xs:enumeration value="1" />
                                            <xs:enumeration value="M" />
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                                <xs:attribute name="m-ary-sep" use="optional" default=",">
                                    <xs:annotation>
                                        <xs:documentation>The separator for the M-ary relations (by default, ',')</xs:documentation>
                                    </xs:annotation>
                                    <xs:simpleType>
                                        <xs:restriction base="bp:nonEmptyStringType">
                                            <xs:length value="1"/>
                                        </xs:restriction>
                                    </xs:simpleType>
                                </xs:attribute>
                                <xs:attribute name="prefix" type="bp:columnNameType" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>The optional prefix to prepend to the column names when the idref columns are transferred</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="partial-participation" use="optional" type="xs:boolean" default="false">
                                    <xs:annotation>
                                        <xs:documentation>Is this a partial or total participation relationship?</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="inheritable" use="optional" type="xs:boolean" default="false">
                                    <xs:annotation>
                                        <xs:documentation>When there is a relation from this concept to itself, we decide whether the target is updated on inheritance to the new concept</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:extension>
                        </xs:complexContent>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="name" use="required" type="bp:symbolType">
                <xs:annotation>
                    <xs:documentation>The unique short name of this concept, within the domain (so it can be reused in different domains)</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="fullname" use="required" type="bp:nonEmptyStringType">
                <xs:annotation>
                    <xs:documentation>A meaningful name of this concept</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    
    <!-- And at last, the main element!!!!! -->
    <xs:element name="dcc-schema">
        <xs:annotation>
            <xs:documentation>The main element of the DCC schema description</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bp:annotation" minOccurs="0" maxOccurs="unbounded" />
                <xs:element name="collection-domain">
                    <xs:annotation>
                        <xs:documentation>The domain of collections to be used by BLUEPRINT inside the NoSQL database</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="collection" minOccurs="1" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>A collection which is going to hold data</xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element ref="bp:index" minOccurs="0" maxOccurs="unbounded"/>
                                    </xs:sequence>
                                    <xs:attribute name="name" type="bp:symbolType" use="required">
                                        <xs:annotation>
                                            <xs:documentation>The collection symbolic short name</xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="path" type="bp:nonEmptyStringType" use="required">
                                        <xs:annotation>
                                            <xs:documentation>The collection full path</xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                    <xs:key name="collection-key">
                        <xs:annotation>
                            <xs:documentation>There cannot be two collections with the same name</xs:documentation>
                        </xs:annotation>
                        <xs:selector xpath="bp:collection"/>
                        <xs:field xpath="@name"/>
                    </xs:key>
                </xs:element>
                <xs:element name="cv-declarations">
                    <xs:annotation>
                        <xs:documentation>Controlled Vocabulary declarations, either from a file or inline</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="cv" minOccurs="0" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>A named controlled vocabulary either inline or stored</xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:complexContent>
                                        <xs:extension base="bp:cvType">
                                            <xs:attributeGroup ref="bp:nameGroup" />
                                        </xs:extension>
                                    </xs:complexContent>
                                </xs:complexType>
                                <xs:unique name="cv-enum-unique">
                                    <xs:annotation>
                                        <xs:documentation>The enumerated values should not be repeated</xs:documentation>
                                    </xs:annotation>
                                    <xs:selector xpath="e"/>
                                    <xs:field xpath="@v"/>
                                </xs:unique>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="dir" use="optional" type="bp:nonEmptyStringType">
                            <xs:annotation>
                                <xs:documentation>The directory where the controlled vocabulary files (in TSV format) are stored</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="collection" type="bp:symbolType" use="required">
                            <xs:annotation>
                                <xs:documentation>The collection which is going to hold the CVs.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                    <xs:key name="cv-name-key">
                        <xs:selector xpath="bp:cv"/>
                        <xs:field xpath="@name"/>
                    </xs:key>
                </xs:element>
                <xs:element name="null-values">
                    <xs:annotation>
                        <xs:documentation>The null values recognized in this model. Annotations can be used to give hints about the null values</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element ref="bp:annotation" minOccurs="0" maxOccurs="unbounded" />
                            <xs:element ref="bp:e" minOccurs="1" maxOccurs="unbounded" />
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="pattern-declarations">
                    <xs:annotation>
                        <xs:documentation>Patterns used either in the schema or on the tabular data modelled by the schema</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="pattern" minOccurs="0" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>A named regular expression used to validate tokens of data</xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:complexContent>
                                        <xs:extension base="bp:patternType">
                                            <xs:attribute name="name" type="bp:symbolType" use="required">
                                                <xs:annotation>
                                                    <xs:documentation>The symbolic name of the pattern, used in many places</xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                        </xs:extension>
                                    </xs:complexContent>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                    <xs:key name="pattern-name-key">
                        <xs:selector xpath="bp:pattern"/>
                        <xs:field xpath="@name"/>
                    </xs:key>
                </xs:element>
                <xs:element name="compound-types">
                    <xs:annotation>
                        <xs:documentation>The different compound types of columns (to be revised/expanded)</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="compound-type" type="bp:namedCompoundType" minOccurs="0" maxOccurs="unbounded"/>
                        </xs:sequence>
                    </xs:complexType>
                    <xs:key name="compound-type-key">
                        <xs:selector xpath=".//bp:compound-type"/>
                        <xs:field xpath="@name"/>
                    </xs:key>
                </xs:element>
                <xs:element name="concept-types">
                    <xs:annotation>
                        <xs:documentation>The different types of concepts (to be revised/expanded)</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element ref="bp:concept-type" minOccurs="0" maxOccurs="unbounded"/>
                        </xs:sequence>
                    </xs:complexType>
                    <xs:key name="concept-type-key">
                        <xs:selector xpath=".//bp:concept-type"/>
                        <xs:field xpath="@name"/>
                    </xs:key>
                </xs:element>
                <xs:element name="filename-format" minOccurs="1" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>The format of the filenames for files containing knwoledge from a concept domain.
                            Inside these filenames, when something starts with $ (dollar), it is the name of an
                            annotation or a context-dependent value (like $$domain or $$concept). $$domain is the concept domain name,
                            and $$concept is the concept name.
                            When something starts with @ (at), it is the name of a previously declared controlled vocabulary.
                            When something starts with \ (backslash), it is the name of a previously declared pattern to validate against.
                            When something starts with % (percentage), it is the name of a type, used for item-type attribute in column type definition.
                            For instance: $$domain-$$concept--@B1-\ISODATE--%string.txt
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:simpleContent>
                            <xs:extension base="bp:fileNameType">
                                <xs:attribute name="name" use="required" type="bp:conceptTypeNameType">
                                    <xs:annotation>
                                        <xs:documentation>The name of this filename format</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:extension>
                        </xs:simpleContent>
                    </xs:complexType>
                </xs:element>
                <xs:element name="concept-domain" minOccurs="1" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>A concept domain, which gathers related features about methylation, rna-seq, etc... in one or more concepts. Those concepts can be related in several ways</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element ref="bp:description" minOccurs="0" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>The detailed description of this concept domain</xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element ref="bp:annotation" minOccurs="0" maxOccurs="unbounded" />
                            <xs:element ref="bp:concept" minOccurs="1" maxOccurs="unbounded"/>
                        </xs:sequence>
                        <xs:attribute name="domain" type="bp:symbolType" use="required">
                                <xs:annotation>
                                    <xs:documentation>The unique short name, or key, of this concept domain.
This key must appear in the filenames of the files containing concepts about the concept domain.
Also, this key is used to look for LaTeX documentation about the concept domain</xs:documentation>
                                </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="fullname" type="bp:nonEmptyStringType" use="required">
                            <xs:annotation>
                                <xs:documentation>A meaningful name for this domain ('Clinical Data', 'Gene Expression')</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="filename-format" type="bp:conceptTypeNameType" use="required">
                            <xs:annotation>
                                <xs:documentation>The name of the filename format to be used for this concept domain</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="is-abstract" type="xs:boolean" use="optional" default="false">
                            <xs:annotation>
                                <xs:documentation>Is this an abstract concept domain? Abtract concept domain, for instance, are usually not shown in documentation</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                    <!--
                    <xs:key name="concept-domain_concept-key">
                        <xs:selector xpath=".//bp:concept" />
                        <xs:field xpath="@name" />
                    </xs:key>
                    <xs:keyref refer="bp:concept-domain_concept-key" name="concept-domain-relatedto-keyref">
                        <xs:selector xpath=".//bp:related-to" />
                        <xs:field xpath="@concept" />
                    </xs:keyref>
                    -->
                </xs:element>
            </xs:sequence>
            <xs:attribute name="project" use="required" type="bp:nonEmptyStringType">
                <xs:annotation>
                    <xs:documentation>The name of the project designed</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="schemaVer" use="required">
                <xs:annotation>
                    <xs:documentation>The version number of the DCC schema model</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:pattern value="(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))+" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="docsDir" type="bp:nonEmptyStringType" use="required">
                <xs:annotation>
                    <xs:documentation>The directory which holds the additional documentation for this model, used to generated the PDF</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
        <xs:key name="filename-format-key">
            <xs:annotation>
                <xs:documentation>There cannot be two formats with the same name</xs:documentation>
            </xs:annotation>
            <xs:selector xpath="bp:filename-format"/>
            <xs:field xpath="@name"/>
        </xs:key>
        <!--  XPath subset understood by XML Schema is not powerful enough
        <xs:key name="concept-key">
            <xs:annotation>
                <xs:documentation>The concept key, used to validate the related-to elements</xs:documentation>
            </xs:annotation>
            <xs:selector xpath=".//bp:concept"></xs:selector>
            <xs:field xpath="ancestor::bp:concept-domain/@domain" />
            <xs:field xpath="@name"></xs:field>
        </xs:key>
        -->
        
        <xs:keyref refer="bp:cv-name-key" name="column-cv-keyref">
            <xs:selector xpath=".//bp:column-type"></xs:selector>
            <xs:field xpath="@cv"></xs:field>
        </xs:keyref>
    	<xs:keyref refer="bp:cv-name-key" name="cv-ref-keyref">
    		<xs:selector xpath=".//bp:cv-ref"></xs:selector>
    		<xs:field xpath="@name"></xs:field>
    	</xs:keyref>
    	<xs:keyref refer="bp:collection-key" name="collection-key-ref">
            <xs:selector xpath=".//bp:concept-type"/>
            <xs:field xpath="@collection"/>
        </xs:keyref>
        <xs:keyref refer="bp:filename-format-key" name="concept-domain-filename-format-fk">
            <xs:selector xpath="bp:concept-domain"></xs:selector>
            <xs:field xpath="@filename-format"></xs:field>
        </xs:keyref>
        <xs:keyref refer="bp:concept-type-key" name="concept-type-key-ref">
            <xs:selector xpath=".//bp:concept/bp:base-concept-type"/>
            <xs:field xpath="@name"/>
        </xs:keyref>
        <xs:keyref refer="bp:compound-type-key" name="compound-type-key-ref">
            <xs:selector xpath=".//bp:column-type"></xs:selector>
            <xs:field xpath="@compound-type"></xs:field>
        </xs:keyref>
        <xs:keyref refer="bp:pattern-name-key" name="pattern-name-key-ref">
            <xs:selector xpath=".//bp:column-type"></xs:selector>
            <xs:field xpath="@pattern"></xs:field>
        </xs:keyref>
        
        
        <!-- The key referred by this FK needed an XPath expression more complex than what XML Schema can understand
        <xs:keyref refer="bp:concept-key" name="related-to-fk">
            <xs:selector xpath=".//bp:concept/bp:related-to"></xs:selector>
            <xs:field xpath="@domain" />
            <xs:field xpath="@concept" />
        </xs:keyref>
        -->
    </xs:element>
</xs:schema>