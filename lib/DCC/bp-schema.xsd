<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:bp="http://www.blueprint-epigenome.eu/dcc/schema" elementFormDefault="qualified" targetNamespace="http://www.blueprint-epigenome.eu/dcc/schema">
    <xs:annotation>
        <xs:documentation>BLUEPRINT DCC Schema, which integrates the description of the tabular submission files, their filenames and their relationships</xs:documentation>
    </xs:annotation>
    
    <xs:simpleType name="sepsType">
        <xs:restriction base="xs:string">
            <xs:minLength value="1" />
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="symbolType">
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z][a-zA-Z0-9]*" />
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="fileNameType">
        <xs:annotation>
            <xs:documentation>The filename pattern, which validates the right patterns</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:minLength value="1" />
            <xs:pattern value="[^\\$%@]*(([\\%@]|${1,2})([a-zA-Z][a-zA-Z0-9]*)[^\\$%@]*)*" />
        </xs:restriction>
    </xs:simpleType>
    
    <!--
        TODO: compound types are going to be refactored in the near future
    <xs:simpleType name="compoundTypePatternType">
        <xs:annotation>
            <xs:documentation>The compound type pattern pattern, which validates the right patterns</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:minLength value="1" />
            <xs:pattern value="[^\\$%@]*(([\\%@]|${1,2})([a-zA-Z][a-zA-Z0-9]*:[a-zA-Z][a-zA-Z0-9]*)[^\\$%@]*)*" />
        </xs:restriction>
    </xs:simpleType>
    -->
    
    <xs:element name="description">
        <xs:annotation>
            <xs:documentation>The detailed description of this item</xs:documentation>
        </xs:annotation>
    </xs:element>
    
    <xs:element name="annotation">
        <xs:annotation>
            <xs:documentation>Additional annotations, either supplementary documentation or other future kinds</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence>
                <xs:any processContents="lax" namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attribute name="key" type="bp:symbolType" use="required">
                <xs:annotation>
                    <xs:documentation>The key used to tell the kind of annotation</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    
    <!-- First, the reusable complex types -->
    <xs:complexType name="cvType">
        <xs:annotation>
            <xs:documentation>A controlled vocabulary either inline or stored</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="cv-file" type="xs:string">
                <xs:annotation>
                    <xs:documentation>A tabular file with the vocabulary, following the enumerated value/description format</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:sequence>
                <xs:element ref="bp:description" minOccurs="0" maxOccurs="unbounded" />
                <xs:element ref="bp:annotation" minOccurs="0" maxOccurs="unbounded" />
                <xs:element name="e" minOccurs="1" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>An enumerated value, containing its description inside the tag</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:simpleContent>
                            <xs:extension base="xs:string">
                                <xs:attribute name="v" type="xs:string" use="required">
                                    <xs:annotation>
                                        <xs:documentation>The enumerated value which is used</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:extension>
                        </xs:simpleContent>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
        </xs:choice>
    </xs:complexType>
    
    <xs:complexType name="patternType">
        <xs:annotation>
            <xs:documentation>A regular expression used to validate tokens of data</xs:documentation>
        </xs:annotation>
        <xs:attribute name="match" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>A Perl5-like regular expression which matches the content</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    
    <!-- Second, the reusable elements -->
    <xs:element name="column">
        <xs:annotation>
            <xs:documentation>A column of data. It contains the data type, pattern and enumeration restrictions</xs:documentation>
        </xs:annotation>
        
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bp:description" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The detailed description of this column</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element ref="bp:annotation" minOccurs="0" maxOccurs="unbounded" />
                <xs:element name="column-type">
                    <xs:annotation>
                        <xs:documentation>The type and restrictions of the column</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:choice minOccurs="0" maxOccurs="1">
                            <xs:element name="cv" type="bp:cvType">
                                <xs:annotation>
                                    <xs:documentation>An anonymous, inline controlled vocabulary</xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="pattern" type="bp:patternType">
                                <xs:annotation>
                                    <xs:documentation>An anonymous regular expression used to validate tokens of data</xs:documentation>
                                </xs:annotation>
                            </xs:element>
                        </xs:choice>
                        <xs:attribute name="item-type" use="required">
                            <xs:annotation>
                                <xs:documentation>The basic type of the values for this column, either in single or in multi-dimensional array mode</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="string">
                                        <xs:annotation>
                                            <xs:documentation>String data</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="integer">
                                        <xs:annotation>
                                            <xs:documentation>Integer numbers</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="decimal">
                                        <xs:annotation>
                                            <xs:documentation>Floating point (pseudo-real) numbers</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="boolean">
                                        <xs:annotation>
                                            <xs:documentation>A boolean value (either true or false)</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="timestamp">
                                        <xs:annotation>
                                            <xs:documentation>Timestamp</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="compound">
                                        <xs:annotation>
                                            <xs:documentation>A compound type, like a hash or a structure</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="pattern" type="xs:string" use="optional">
                            <xs:annotation>
                                <xs:documentation>The symbolic name of the pattern used to validate values for this column</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="compound-template" use="optional">
                            <xs:annotation>
                                <xs:documentation>When this column holds a compound type, the template of the pieces, separated by the separators.
                                    For instance, if the compound separator is ';', then 'GENE;URL' is telling that the first piece is GENE, and the second is URL</xs:documentation>
                            </xs:annotation>
                            <!-- Hack to be removed when compound-template is redesigned -->
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:minLength value="3" />
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="compound-seps" type="bp:sepsType" use="optional">
                            <xs:annotation>
                                <xs:documentation>This attribute must be set when the column is a compound type, it is a string whose characters are separators for the faceted values in the compound type.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="cv" type="xs:string" use="optional">
                            <xs:annotation>
                                <xs:documentation>The symbolic name of the controlled vocabulary used to validate the values for this column</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="column-kind" use="required">
                            <xs:annotation>
                                <xs:documentation>The kind of column: idref, required or optional</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="idref">
                                        <xs:annotation>
                                            <xs:documentation>An identifier or a reference to an identifier</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="required">
                                        <xs:annotation>
                                            <xs:documentation>A column with required values</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="optional">
                                        <xs:annotation>
                                            <xs:documentation>A column with optional values</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="array-seps" type="bp:sepsType" use="optional">
                            <xs:annotation>
                                <xs:documentation>If this attribute is set, it is a string whose characters are separators for the input values.
                                    So, values for this column are treated as a multidimensional array, with the same number of dimensions as
                                    the number of separators (i.e. the length of this attribute)</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="default" type="xs:string" use="optional">
                            <xs:annotation>
                                <xs:documentation>If this attribute is set, it is a value recognized as "default" for this column, so it must bypass all the checks</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="name" use="required" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The name of this column data</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            
        </xs:complexType>
    </xs:element>
    
    <xs:element name="index">
        <xs:annotation>
            <xs:documentation>An index defined on the collection or the concept type</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="attr" minOccurs="1" maxOccurs="unbounded">
                    <xs:complexType>
                        <xs:attribute name="name" type="xs:string" use="required">
                            <xs:annotation>
                                <xs:documentation>An attribute whose values are used to build the key</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="ord" use="optional" default="1">
                            <xs:annotation>
                                <xs:documentation>The ordering, either ascending or descending</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:integer">
                                    <xs:enumeration value="-1">
                                        <xs:annotation>
                                            <xs:documentation>Descending ordering</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="1">
                                        <xs:annotation>
                                            <xs:documentation>Ascending ordering</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="unique" use="required" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation>Should this index ensure the uniqueness property among its keys?</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
        <xs:unique name="indexKey">
            <xs:annotation>
                <xs:documentation>A key cannot have the same attribute twice</xs:documentation>
            </xs:annotation>
            <xs:selector xpath="bp:attr"/>
            <xs:field xpath="@name"/>
        </xs:unique>
        
    </xs:element>
    
    <xs:element name="concept-type">
        <xs:annotation>
            <xs:documentation>Each concept type is associated to a collection, and as such, the concepts could have common attributes</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bp:column" minOccurs="0" maxOccurs="unbounded" />
                <xs:element ref="bp:index" minOccurs="0" maxOccurs="unbounded" />
                <xs:element name="subtypes" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>This element contains the declarations of concept type subtypes</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element ref="bp:concept-type" minOccurs="1" maxOccurs="unbounded"></xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="name" use="optional" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The short name for this concept type.
                        If it doesn't appear, then it is an abstract concept type</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="collection" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>The collection which is going to hold the documents corresponding to concepts whose concept-type is this.
                        A main concept from a concept domain must have this attribute.
                        The concept-types using this attribute cannot use the "key" attribute.
                        If neither "collection" nor "key" attributes appear, the concepts using this concept type must be subconcepts.
                        Those subconcepts inherit the "collection" or "key" attribute from the nearest ancestor with it</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="key" type="xs:string" use="optional">
                <xs:annotation>
                    <xs:documentation>The hash key which is going to hold the values following this concept set schema.
                        The concepts using a concept-type with a "key" attribute must be a subconcept, because they are stored with this key on documents following the parent concept, and so cannot be a main concept from a concept domain.
                        If neither "collection" nor "key" attributes appear, the concepts using this concept type must be subconcepts.
                        Those subconcepts inherit the "collection" or "key" attribute from the nearest ancestor with it.
                        So, the concept-types using this attribute cannot use the "collection" attribute</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="is-virtual" type="xs:boolean" use="prohibited">
                <xs:annotation>
                    <xs:documentation>If this is false, the destination is a real collection.
                        If this is true, the destination is a key inside a parent "document"</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="concept">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bp:description" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>The detailed description of this concept</xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element ref="bp:annotation" minOccurs="0" maxOccurs="unbounded" />
                <xs:element ref="bp:column" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="subconcepts" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>A primary concept can have secondary subconcepts.
                            The secondary concepts inherit the idref columns from the primary concepts, so the concept type for these secondary concepts should not overlap columns or types with the primary one</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element ref="bp:concept" minOccurs="1" maxOccurs="unbounded"></xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="related-to" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>When we need to indicate relations 1:N to other concepts (being this concept the one in the N part), we use this element</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="domain" type="xs:string" use="optional">
                            <xs:annotation>
                                <xs:documentation>The domain where the concept is defined. By default, it is the same domain
                                    as the one where the concept containing this related-to element is defined.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="concept" type="xs:string" use="required">
                            <xs:annotation>
                                <xs:documentation>The concept this one is related to</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="prefix" type="xs:string" use="optional">
                            <xs:annotation>
                                <xs:documentation>The optional prefix to prepend to the column names when the idref columns are transferred</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="name" use="required" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The unique short name of this concept, within the domain (so it can be reused in different domains)</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="fullname" use="required" type="xs:string">
                <xs:annotation>
                    <xs:documentation>A meaningful name of this concept</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="basetype" use="required" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The base type this concept is based on. All the declared columns on the type are for this concept, plus the additional ones declared here</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    
    <!-- And at last, the main element!!!!! -->
    <xs:element name="dcc-schema">
        <xs:annotation>
            <xs:documentation>The main element of the DCC schema description</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bp:annotation" minOccurs="0" maxOccurs="unbounded" />
                <xs:element name="collection-domain">
                    <xs:annotation>
                        <xs:documentation>The domain of collections to be used by BLUEPRINT inside the NoSQL database</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="collection" minOccurs="1" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>A collection which is going to hold data</xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element ref="bp:index" minOccurs="0" maxOccurs="unbounded"/>
                                    </xs:sequence>
                                    <xs:attribute name="name" type="xs:string" use="required">
                                        <xs:annotation>
                                            <xs:documentation>The collection symbolic short name</xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="path" type="xs:string" use="required">
                                        <xs:annotation>
                                            <xs:documentation>The collection full path</xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                    <xs:key name="collection-key">
                        <xs:annotation>
                            <xs:documentation>There cannot be two collections with the same name</xs:documentation>
                        </xs:annotation>
                        <xs:selector xpath="bp:collection"/>
                        <xs:field xpath="@name"/>
                    </xs:key>
                </xs:element>
                <xs:element name="cv-declarations">
                    <xs:annotation>
                        <xs:documentation>Controlled Vocabulary declarations, either from a file or inline</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="cv" minOccurs="0" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>A named controlled vocabulary either inline or stored</xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:complexContent>
                                        <xs:extension base="bp:cvType">
                                            <xs:attribute name="name" use="required" type="bp:symbolType">
                                                <xs:annotation>
                                                    <xs:documentation>The symbolic name of the CV, used inside this schema</xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                        </xs:extension>
                                    </xs:complexContent>
                                </xs:complexType>
                                <xs:unique name="cv-enum-unique">
                                    <xs:annotation>
                                        <xs:documentation>The enumerated values should not be repeated</xs:documentation>
                                    </xs:annotation>
                                    <xs:selector xpath="e"/>
                                    <xs:field xpath="@v"/>
                                </xs:unique>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="dir" use="optional" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>The directory where the controlled vocabulary files (in TSV format) are stored</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="collection" type="xs:string" use="required">
                            <xs:annotation>
                                <xs:documentation>The collection which is going to hold the CVs.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                    <xs:key name="cv-name-key">
                        <xs:selector xpath="bp:cv"/>
                        <xs:field xpath="@name"/>
                    </xs:key>
                </xs:element>
                <xs:element name="pattern-declarations">
                    <xs:annotation>
                        <xs:documentation>Patterns used either in the schema or on the tabular data modelled by the schema</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="pattern" minOccurs="0" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>A named regular expression used to validate tokens of data</xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:complexContent>
                                        <xs:extension base="bp:patternType">
                                            <xs:attribute name="name" type="bp:symbolType" use="required">
                                                <xs:annotation>
                                                    <xs:documentation>The symbolic name of the pattern, used in many places</xs:documentation>
                                                </xs:annotation>
                                            </xs:attribute>
                                        </xs:extension>
                                    </xs:complexContent>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                    <xs:key name="pattern-name-key">
                        <xs:selector xpath="bp:pattern"/>
                        <xs:field xpath="@name"/>
                    </xs:key>
                </xs:element>
                <xs:element name="concept-types">
                    <xs:annotation>
                        <xs:documentation>The different types of concepts (to be revised/expanded)</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element ref="bp:concept-type" minOccurs="0" maxOccurs="unbounded"/>
                        </xs:sequence>
                    </xs:complexType>
                    <xs:key name="concept-type-key">
                        <xs:selector xpath=".//bp:concept-type"/>
                        <xs:field xpath="@name"/>
                    </xs:key>
                </xs:element>
                <xs:element name="filename-format" minOccurs="1" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>The format of the filenames for files containing knwoledge from a concept domain.
                            Inside these filenames, when something starts with $ (dollar), it is the name of an
                            annotation or a context constant (like $$domain or $$concept). $$domain is the concept domain name,
                            and $$concept is the concept name.
                            When something starts with @ (at), it is the name of a previously declared controlled vocabulary.
                            When something starts with \ (backslash), it is the name of a previously declared pattern to validate against.
                            When something starts with % (percentage), it is the name of a type, used for item-type attribute in column type definition.
                            For instance: $$domain-$$concept--@B1-\ISODATE--%string.txt
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:simpleContent>
                            <xs:extension base="bp:fileNameType">
                                <xs:attribute name="name" use="required" type="xs:string">
                                    <xs:annotation>
                                        <xs:documentation>The name of this filename format</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                            </xs:extension>
                        </xs:simpleContent>
                    </xs:complexType>
                </xs:element>
                <xs:element name="concept-domain" minOccurs="1" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>A concept domain, which gathers related features about methylation, rna-seq, etc... in one or more concepts. Those concepts can be related in several ways</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element ref="bp:concept" minOccurs="1" maxOccurs="unbounded"/>
                        </xs:sequence>
                        <xs:attribute name="domain" type="xs:string" use="required">
                                <xs:annotation>
                                    <xs:documentation>The unique short name, or key, of this concept domain.
This key must appear in the filenames of the files containing concepts about the concept domain.
Also, this key is used to look for LaTeX documentation about the concept domain</xs:documentation>
                                </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="fullname" type="xs:string" use="required">
                            <xs:annotation>
                                <xs:documentation>A meaningful name for this domain ('Clinical Data', 'Gene Expression')</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="filename-format" type="xs:string" use="required">
                            <xs:annotation>
                                <xs:documentation>The name of the filename format to be used for this concept domain</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                    <!--
                    <xs:key name="concept-domain_concept-key">
                        <xs:selector xpath=".//bp:concept" />
                        <xs:field xpath="@name" />
                    </xs:key>
                    <xs:keyref refer="bp:concept-domain_concept-key" name="concept-domain-relatedto-keyref">
                        <xs:selector xpath=".//bp:related-to" />
                        <xs:field xpath="@concept" />
                    </xs:keyref>
                    -->
                </xs:element>
            </xs:sequence>
            <xs:attribute name="project" use="required" type="xs:string">
                <xs:annotation>
                    <xs:documentation>The name of the project designed</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="schemaVer" use="required">
                <xs:annotation>
                    <xs:documentation>The version number of the DCC schema model</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:pattern value="(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))+" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="docsDir" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>The directory which holds the additional documentation for this model, used to generated the PDF</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
        <xs:key name="filename-format-key">
            <xs:annotation>
                <xs:documentation>There cannot be two formats with the same name</xs:documentation>
            </xs:annotation>
            <xs:selector xpath="bp:filename-format"/>
            <xs:field xpath="@name"/>
        </xs:key>
        <!--  XPath subset understood by XML Schema is not powerful enough
        <xs:key name="concept-key">
            <xs:annotation>
                <xs:documentation>The concept key, used to validate the related-to elements</xs:documentation>
            </xs:annotation>
            <xs:selector xpath=".//bp:concept"></xs:selector>
            <xs:field xpath="ancestor::bp:concept-domain/@domain" />
            <xs:field xpath="@name"></xs:field>
        </xs:key>
        -->
        
        <xs:keyref refer="bp:cv-name-key" name="column-cv-keyref">
            <xs:selector xpath=".//bp:column-type"></xs:selector>
            <xs:field xpath="@cv"></xs:field>
        </xs:keyref>
        <xs:keyref refer="bp:collection-key" name="collection-key-ref">
            <xs:selector xpath=".//bp:concept-type"/>
            <xs:field xpath="@collection"/>
        </xs:keyref>
        <xs:keyref refer="bp:filename-format-key" name="concept-domain-filename-format-fk">
            <xs:selector xpath="bp:concept-domain"></xs:selector>
            <xs:field xpath="@filename-format"></xs:field>
        </xs:keyref>
        <xs:keyref refer="bp:concept-type-key" name="concept-type-key-ref">
            <xs:selector xpath=".//bp:concept"/>
            <xs:field xpath="@basetype"/>
        </xs:keyref>
        <!-- The key referred by this FK needed an XPath expression more complex than what XML Schema can understand
        <xs:keyref refer="bp:concept-key" name="related-to-fk">
            <xs:selector xpath=".//bp:concept/bp:related-to"></xs:selector>
            <xs:field xpath="@domain" />
            <xs:field xpath="@concept" />
        </xs:keyref>
        -->
    </xs:element>
</xs:schema>